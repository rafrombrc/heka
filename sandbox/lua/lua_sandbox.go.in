/***** BEGIN LICENSE BLOCK *****
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# The Initial Developer of the Original Code is the Mozilla Foundation.
# Portions created by the Initial Developer are Copyright (C) 2012-2015
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Mike Trinkala (trink@mozilla.com)
#   Rob Miller (rmiller@mozilla.com)
#
# ***** END LICENSE BLOCK *****/
package lua

/*
#cgo CFLAGS: -std=gnu99 -I @LUA_INCLUDE_PATH@
#@CGO_LDFLAGS@
#include <stdlib.h>
#include <luasandbox/heka/sandbox.h>
#include <luasandbox.h>
#include "lua_sandbox_interface.h"
*/
import "C"

import (
	"fmt"
	"log"
	"path/filepath"
	"strings"
	"unsafe"

	"github.com/mozilla-services/heka/pipeline"
	"github.com/mozilla-services/heka/sandbox"
)

const SandboxIoTemplate = `{
memory_limit = %d,
instruction_limit = %d,
output_limit = %d,
path = [[%s]],
cpath = [[%s]],
remove_entries = {
[''] = { 'dofile', 'load', 'loadfile','loadstring', 'print'},
os = {'exit', 'setlocale'}}}`

const SandboxTemplate = `{
memory_limit = %d,
instruction_limit = %d,
output_limit = %d,
path = [[%s]],
cpath = [[%s]],
remove_entries = {
[''] = {'collectgarbage','coroutine','dofile','load','loadfile','loadstring','newproxy','print'},
os = {'getenv','execute','exit','remove','rename','setlocale','tmpname'}
},
disable_modules = {io = 1}
}`

const cfgTemplate = `
memory_limit = %d
instruction_limit = %d
output_limit = %d
path = [[%s]]
cpath = [[%s]]
`

//export go_lua_inject_message
func go_lua_inject_message(ptr unsafe.Pointer, payload *C.char, payload_len C.int) int {
	var lsb *LuaSandbox = (*LuaSandbox)(ptr)
	return lsb.injectMessage(C.GoStringN(payload, payload_len))
}

type LuaSandbox struct {
	hsb           *C.lsb_heka_sandbox
	injectMessage func(payload string) int
}

func CreateLuaSandbox(conf *sandbox.SandboxConfig, stateFile string) (sandbox.Sandbox, error) {
	var (
		lua_path, lua_cpath []string
	)
	lsb := new(LuaSandbox)
	cs := C.CString(conf.ScriptFilename)
	cstateFile := C.CString(stateFile)
	defer func() {
		C.free(unsafe.Pointer(cs))
		C.free(unsafe.Pointer(cstateFile))
	}()

	paths := strings.Split(conf.ModuleDirectory, ";")
	for _, p := range paths {
		lua_path = append(lua_path, filepath.Join(p, "?.lua"))
		lua_cpath = append(lua_cpath, filepath.Join(p, "?@LUA_SHARED_LIBRARY_SUFFIX@"))
	}

	cfg := fmt.Sprintf(cfgTemplate,
		conf.MemoryLimit,
		conf.InstructionLimit,
		conf.OutputLimit,
		strings.Join(lua_path, ";"),
		strings.Join(lua_cpath, ";"))
	ccfg := C.CString(cfg)
	defer C.free(unsafe.Pointer(ccfg))

	lsb.hsb = C.heka_create_sandbox(unsafe.Pointer(lsb), cs, cstateFile, ccfg, nil)

	if lsb.hsb == nil {
		return nil, fmt.Errorf("Sandbox creation failed")
	}
	lsb.injectMessage = func(p string) int {
		log.Printf("payload: %s\n", p)
		return 0
	}
	// lsb.config = conf.Config
	// lsb.globals = conf.Globals
	return lsb, nil
}

// func (this *LuaSandbox) Init(dataFile string) error {
// 	csDataFile := C.CString(dataFile)
// 	csPluginType := C.CString(this.sbConfig.PluginType)
// 	defer func() {
// 		C.free(unsafe.Pointer(csDataFile))
// 		C.free(unsafe.Pointer(csPluginType))
// 	}()
// 	r := int(C.sandbox_init(this.lsb, csDataFile, csPluginType))
// 	if r != 0 {
// 		return fmt.Errorf("Init() %s", this.LastError())
// 	}
// 	return nil
// }

func (lsb *LuaSandbox) Stop() {
	C.lsb_heka_stop_sandbox(lsb.hsb)
}

func (lsb *LuaSandbox) Destroy() error {
	c := C.lsb_heka_destroy_sandbox(lsb.hsb)
	lsb.hsb = nil
	if c != nil {
		err := C.GoString(c)
		C.free(unsafe.Pointer(c))
		return fmt.Errorf("Destroy() %s", err)
	}
	return nil
}

func (lsb *LuaSandbox) Status() int {
	return int(C.heka_lsb_get_state(lsb.hsb))
}

func (lsb *LuaSandbox) LastError() string {
	return C.GoString(C.heka_lsb_get_error(lsb.hsb))
}

func (lsb *LuaSandbox) Usage(utype, ustat int) uint {
	return uint(C.heka_lsb_usage(lsb.hsb, C.lsb_usage_type(utype),
		C.lsb_usage_stat(ustat)))
}

func (lsb *LuaSandbox) ProcessMessage(pack *pipeline.PipelinePack) int {
	r := int(C.heka_process_message(lsb.hsb, C.CString(string(pack.MsgBytes))))
	return r
}

func (lsb *LuaSandbox) TimerEvent(ns int64) int {
	return int(C.lsb_heka_timer_event(lsb.hsb, C.time_t(ns), C.bool(false)))
}

func (lsb *LuaSandbox) InjectMessage(f func(payload string) int) {
	lsb.injectMessage = f
}
