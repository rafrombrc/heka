/***** BEGIN LICENSE BLOCK *****
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# The Initial Developer of the Original Code is the Mozilla Foundation.
# Portions created by the Initial Developer are Copyright (C) 2012-2015
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Mike Trinkala (trink@mozilla.com)
#   Rob Miller (rmiller@mozilla.com)
#
# ***** END LICENSE BLOCK *****/
package lua

/*
#cgo CFLAGS: -std=gnu99 -I @LUA_INCLUDE_PATH@
#@CGO_LDFLAGS@
#include <stdlib.h>
#include <luasandbox/heka/sandbox.h>
#include <luasandbox.h>
#include "lua_sandbox_interface.h"
*/
import "C"

import (
	"fmt"
	"log"
	"path/filepath"
	"strings"
	"unsafe"

	"github.com/mozilla-services/heka/pipeline"
	"github.com/mozilla-services/heka/sandbox"
)

const cfgTemplate = `
memory_limit = %d
instruction_limit = %d
output_limit = %d
path = [[%s]]
cpath = [[%s]]
%s
`

//export go_lua_inject_message
func go_lua_inject_message(ptr unsafe.Pointer, payload *C.char, payload_len C.int) int {
	var lsb *LuaSandbox = (*LuaSandbox)(ptr)
	return lsb.injectMessage(C.GoStringN(payload, payload_len))
}

//export go_lua_log
func go_lua_log(output *C.char) {
	log.Println(C.GoString(output))
}

//export go_lua_output_update_checkpoint
func go_lua_output_update_checkpoint(sbPtr unsafe.Pointer, seqIdPtr unsafe.Pointer) int {
	// We should be holding a LuaSandbox and a queue cursor string.
	var lsb *LuaSandbox = (*LuaSandbox)(sbPtr)
	var cQueueCursor *C.char = (*C.char)(seqIdPtr)
	queueCursor := C.GoString(cQueueCursor)
	lsb.updateCursor(queueCursor)
	return 0
}

type LuaSandbox struct {
	hsb           *C.lsb_heka_sandbox
	sbxType       int
	injectMessage func(payload string) int
	updateCursor  func(queueCursor string)
}

func makePluginConfigString(pConf map[string]interface{}) string {
	var confStrs []string
	for k, v := range pConf {
		// Don't let user config change the sandbox security.
		if k == "override_restricted_headers" {
			continue
		}
		var confStr string
		switch u := v.(type) {
		case string:
			confStr = fmt.Sprintf("%s = [[%s]]", k, u)
		case []string:
			quoted := []string{}
			for _, s := range u {
				quoted = append(quoted, fmt.Sprintf("[[%s]]", s))
			}
			v = strings.Join(quoted, ", ")
			confStr = fmt.Sprintf("%s = {%v}", k, v)
		case []int, []int64, []float64, []bool:
			stringed := fmt.Sprintf("%v", v)
			stringed = stringed[1 : len(stringed)-1]
			stringed = strings.Replace(stringed, " ", ", ", -1)
			confStr = fmt.Sprintf("%s = {%s}", k, stringed)
		case int, int64, float64, bool:
			confStr = fmt.Sprintf("%s = %v", k, v)
		default:
			confStr = ""
		}
		if confStr != "" {
			confStrs = append(confStrs, confStr)
		}
	}
	return strings.Join(confStrs, "\n")
}

func CreateLuaSandbox(conf *sandbox.SandboxConfig, stateFile string) (sandbox.Sandbox, error) {
	sbxType, ok := sandbox.PluginSbxTypeMap[conf.PluginType]
	if !ok {
		return nil, fmt.Errorf("Unknown plugin type: %s", conf.PluginType)
	}
	var (
		lua_path, lua_cpath []string
	)
	lsb := new(LuaSandbox)
	lsb.sbxType = sbxType
	cs := C.CString(conf.ScriptFilename)
	cstateFile := C.CString(stateFile)
	defer func() {
		C.free(unsafe.Pointer(cs))
		C.free(unsafe.Pointer(cstateFile))
	}()

	paths := strings.Split(conf.ModuleDirectory, ";")
	for _, p := range paths {
		lua_path = append(lua_path, filepath.Join(p, "?.lua"))
		lua_cpath = append(lua_cpath, filepath.Join(p, "?@LUA_SHARED_LIBRARY_SUFFIX@"))
	}

	cfg := fmt.Sprintf(
		cfgTemplate,
		conf.MemoryLimit,
		conf.InstructionLimit,
		conf.OutputLimit,
		strings.Join(lua_path, ";"),
		strings.Join(lua_cpath, ";"),
		makePluginConfigString(conf.Config),
	)
	if conf.PluginType == "decoder" {
		cfg = fmt.Sprintf("%s\n%s", cfg, "override_restricted_headers = true")
	}
	ccfg := C.CString(cfg)
	defer C.free(unsafe.Pointer(ccfg))

	lsb.injectMessage = func(p string) int {
		log.Printf("payload: %s\n", p)
		return 0
	}

	lsb.hsb = C.heka_create_sandbox(unsafe.Pointer(lsb), C.int(sbxType), cs, cstateFile, ccfg)
	if lsb.hsb == nil {
		return nil, fmt.Errorf("Sandbox creation failed")
	}
	return lsb, nil
}

func (lsb *LuaSandbox) Stop() {
	C.lsb_heka_stop_sandbox(lsb.hsb)
}

func (lsb *LuaSandbox) Destroy() error {
	c := C.lsb_heka_destroy_sandbox(lsb.hsb)
	lsb.hsb = nil
	if c != nil {
		err := C.GoString(c)
		C.free(unsafe.Pointer(c))
		return fmt.Errorf("Destroy() %s", err)
	}
	return nil
}

func (lsb *LuaSandbox) Status() int {
	is_running := bool(C.lsb_heka_is_running(lsb.hsb))
	if is_running {
		return sandbox.STATUS_RUNNING
	}
	return sandbox.STATUS_TERMINATED
}

func (lsb *LuaSandbox) LastError() string {
	return C.GoString(C.lsb_heka_get_error(lsb.hsb))
}

func (lsb *LuaSandbox) Stats() sandbox.SandboxStats {
	cStats := C.lsb_heka_get_stats(lsb.hsb)
	return sandbox.SandboxStats{
		MemCur:             int(cStats.mem_cur),
		MemMax:             int(cStats.mem_max),
		OutputMax:          int(cStats.out_max),
		InstruxMax:         int(cStats.ins_max),
		InputMsgCount:      int64(cStats.im_cnt),
		InputMsgBytes:      int64(cStats.im_bytes),
		ProcessMsgCount:    int64(cStats.pm_cnt),
		ProcessMsgFailures: int64(cStats.pm_failures),
		ProcessMsgAvgTime:  float64(cStats.pm_avg),
		ProcessMsgStdDev:   float64(cStats.pm_sd),
		TimerEventAvgTime:  float64(cStats.te_avg),
		TimerEventStdDev:   float64(cStats.te_sd),
	}
}

func (lsb *LuaSandbox) ProcessMessage(pack *pipeline.PipelinePack) int {
	// pack should be nil IFF we're a SandboxInput.
	if pack == nil {
		if lsb.sbxType != sandbox.SBX_TYPE_INPUT {
			return -1
		}
		return int(C.lsb_heka_pm_input(lsb.hsb, 0, nil, false))
	}

	if !pack.TrustMsgBytes {
		pack.EncodeMsgBytes()
	}
	cMsgBytes := C.CString(string(pack.MsgBytes))
	cpblen := C.int(len(pack.MsgBytes))
	var r int
	switch lsb.sbxType {
	case sandbox.SBX_TYPE_ANALYSIS:
		r = int(C.heka_analysis_process_message(lsb.hsb, cMsgBytes, cpblen))
	case sandbox.SBX_TYPE_OUTPUT:
		cQueueCursor := C.CString(pack.QueueCursor)
		r = int(C.heka_output_process_message(lsb.hsb, cMsgBytes, cpblen, cQueueCursor))
		C.free(unsafe.Pointer(cQueueCursor))
	}
	C.free(unsafe.Pointer(cMsgBytes))
	return r
}

func (lsb *LuaSandbox) TimerEvent(ns int64) int {
	return int(C.lsb_heka_timer_event(lsb.hsb, C.time_t(ns), C.bool(false)))
}

func (lsb *LuaSandbox) InjectMessage(injectMessage func(payload string) int) {
	lsb.injectMessage = injectMessage
}

func (lsb *LuaSandbox) UpdateCursor(updateCursor func(queueCursor string)) {
	lsb.updateCursor = updateCursor
}
